package circe

import io.circe.{Decoder, DecodingFailure, JsonObject}
import io.circe.generic.extras.semiauto.deriveConfiguredDecoder
import org.scalatest.flatspec.AnyFlatSpec

class JsonComparison extends AnyFlatSpec {
  behavior of "JsonComparison"
  import tywaves.circuitmapper.tywaves_symbol_table._
  import io.circe.Json
  import io.circe.parser._

  object tywaves_decoders {

    import tywaves.circuitmapper.tywaves_symbol_table._
    import io.circe.generic.extras._

    implicit val customConfiguration: Configuration =
      Configuration.default.withSnakeCaseMemberNames.withSnakeCaseConstructorNames

    implicit val decodeTywaveState: Decoder[TywaveState] = deriveConfiguredDecoder[TywaveState]
    implicit val decodeScope:       Decoder[Scope]       = deriveConfiguredDecoder[Scope]
    implicit val decodeVariable:    Decoder[Variable]    = deriveConfiguredDecoder[Variable]

    implicit val decodeHwType: Decoder[hwtype.HwType] = Decoder.instance { cursor =>
      cursor.as[String] match {
        case Right(valid) => valid match {

            case "wire"    => Right(hwtype.Wire)
            case "reg"     => Right(hwtype.Reg)
            case "mem"     => Right(hwtype.Mem)
            case "unknown" => Right(hwtype.Unknown)
            case "port"    => cursor.downField("dir").as[direction.Directions].map(hwtype.Port)
            case other     => Left(DecodingFailure(s"Unknown HwType: $other", cursor.history))
          }
        case Left(_) =>
          cursor.as[JsonObject].flatMap { obj =>
            obj("port") match {
              case Some(port) =>
                port.as[JsonObject].flatMap { portObj =>
                  portObj("direction") match {
                    case Some(dir) =>
                      dir.as[direction.Directions].map(hwtype.Port)
                    case None =>
                      Left(DecodingFailure("No Direction found", cursor.history))
                  }
                }
              case None => Left(DecodingFailure("No port found", cursor.history))
            }
          }
      }
    }

    implicit val decodeDirection: Decoder[direction.Directions] = Decoder.decodeString.emap {
      case "input"   => Right(direction.Input)
      case "output"  => Right(direction.Output)
      case "inout"   => Right(direction.Inout)
      case "unknown" => Right(direction.Unknown)
      case other     => Left(s"Invalid Direction: $other")
    }

    implicit val decodeRealType: Decoder[realtype.RealType] = deriveConfiguredDecoder[realtype.RealType]
    implicit val decodeGround:   Decoder[realtype.Ground]   = deriveConfiguredDecoder[realtype.Ground]
    implicit val decodeVec:      Decoder[realtype.Vec]      = deriveConfiguredDecoder[realtype.Vec]
    implicit val decodeBundle:   Decoder[realtype.Bundle]   = deriveConfiguredDecoder[realtype.Bundle]

  }

  they should "be equal" in {
    import tywaves_decoders._
    def compare(state1: TywaveState, state2: TywaveState): Boolean = {
      if (state1.scopes.length != state2.scopes.length) {
        Console.err.println(s"state1.scopes.length: ${state1.scopes.length}")
        Console.err.println(s"state2.scopes.length: ${state2.scopes.length}")
        return false
      }
      // Sort them
      val scopes1 = state1.scopes.sortBy(_.name)
      val scopes2 = state2.scopes.sortBy(_.name)
      for (i <- scopes1.indices) {
        if (!scopeEquals(scopes1(i), scopes2(i))) {
          Console.err.println(s"scopes1($i): ${scopes1(i)}")
          Console.err.println(s"scopes2($i): ${scopes2(i)}")
          return false
        }
      }
      true
    }
    def scopeEquals(scope1: Scope, scope2: Scope): Boolean = {
      if (scope1.name != scope2.name) {
        Console.err.println(s"scope1.name: ${scope1.name}")
        Console.err.println(s"scope2.name: ${scope2.name}")
        return false
      }
      if (!variableEquals(scope1.childVariables, scope2.childVariables)) {
        Console.err.println(s"scope1.childVariables: ${scope1.childVariables}")
        Console.err.println(s"scope2.childVariables: ${scope2.childVariables}")
        return false
      }

      val childScopes1 = scope1.childScopes.sortBy(_.name)
      val childScopes2 = scope2.childScopes.sortBy(_.name)
      if (childScopes1.length != childScopes2.length) {
        Console.err.println(s"childScopes1.length: ${childScopes1.length}")
        Console.err.println(s"childScopes2.length: ${childScopes2.length}")
        return false
      }
      // Compare all the child scopes
      for (i <- childScopes1.indices) {
        if (!scopeEquals(childScopes1(i), childScopes2(i))) {
          Console.err.println(s"childScopes1($i): ${childScopes1(i)}")
          Console.err.println(s"childScopes2($i): ${childScopes2(i)}")
          return false
        }
      }
      true
    }
    def variableEquals(_variables1: Seq[Variable], _variables2: Seq[Variable]): Boolean = {
      if (_variables1.length != _variables2.length) return false
      // Sort them
      val variables1 = _variables1.sortBy(_.name)
      val variables2 = _variables2.sortBy(_.name)
      for (i <- variables1.indices) {
        if (variables1(i) != variables2(i)) return {
          Console.err.println(s"variables1($i): ${variables1(i)}")
          Console.err.println(s"variables2($i): ${variables2(i)}")
          false
        }
      }
      true
    }

    val _originalJson =
      "{\n  \"scopes\" : [\n    {\n      \"name\" : \"TOP\",\n      \"child_variables\" : [\n      ],\n      \"child_scopes\" : [\n        {\n          \"name\" : \"svsimTestbench\",\n          \"child_variables\" : [\n            {\n              \"name\" : \"clock\",\n              \"type_name\" : \"Clock\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"input\"\n                }\n              },\n              \"real_type\" : {\n                \"ground\" : {\n                  \"width\" : 1,\n                  \"vcd_name\" : \"clock\"\n                }\n              }\n            },\n            {\n              \"name\" : \"outputSum\",\n              \"type_name\" : \"SInt<8>\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"output\"\n                }\n              },\n              \"real_type\" : {\n                \"ground\" : {\n                  \"width\" : 8,\n                  \"vcd_name\" : \"_outputSum_output\"\n                }\n              }\n            },\n            {\n              \"name\" : \"io\",\n              \"type_name\" : \"AnonymousBundle\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"output\"\n                }\n              },\n              \"real_type\" : {\n                \"bundle\" : {\n                  \"fields\" : [\n                    {\n                      \"name\" : \"out\",\n                      \"type_name\" : \"Bool\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"output\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 1,\n                          \"vcd_name\" : \"io_out\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\" : \"a\",\n                      \"type_name\" : \"Bool\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"output\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 1,\n                          \"vcd_name\" : \"io_a\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\" : \"b\",\n                      \"type_name\" : \"Bool\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"output\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 1,\n                          \"vcd_name\" : \"io_b\"\n                        }\n                      }\n                    }\n                  ],\n                  \"vcd_name\" : \"io\"\n                }\n              }\n            },\n            {\n              \"name\" : \"inputSum\",\n              \"type_name\" : \"MyBundleT\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"input\"\n                }\n              },\n              \"real_type\" : {\n                \"bundle\" : {\n                  \"fields\" : [\n                    {\n                      \"name\" : \"a\",\n                      \"type_name\" : \"UInt<8>\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"input\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 8,\n                          \"vcd_name\" : \"inputSum_a\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\" : \"b\",\n                      \"type_name\" : \"UInt<8>\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"input\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 8,\n                          \"vcd_name\" : \"inputSum_b\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\" : \"nestedBundle\",\n                      \"type_name\" : \"AnonymousBundle\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"input\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"bundle\" : {\n                          \"fields\" : [\n                            {\n                              \"name\" : \"z\",\n                              \"type_name\" : \"Bool\",\n                              \"hw_type\" : {\n                                \"port\" : {\n                                  \"direction\" : \"input\"\n                                }\n                              },\n                              \"real_type\" : {\n                                \"ground\" : {\n                                  \"width\" : 1,\n                                  \"vcd_name\" : \"nestedBundle_z\"\n                                }\n                              }\n                            }\n                          ],\n                          \"vcd_name\" : \"nestedBundle\"\n                        }\n                      }\n                    }\n                  ],\n                  \"vcd_name\" : \"inputSum\"\n                }\n              }\n            },\n            {\n              \"name\" : \"reset\",\n              \"type_name\" : \"Bool\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"input\"\n                }\n              },\n              \"real_type\" : {\n                \"ground\" : {\n                  \"width\" : 1,\n                  \"vcd_name\" : \"reset\"\n                }\n              }\n            }\n          ],\n          \"child_scopes\" : [\n            {\n              \"name\" : \"dut\",\n              \"child_variables\" : [\n                {\n                  \"name\" : \"clock\",\n                  \"type_name\" : \"Clock\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"input\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"ground\" : {\n                      \"width\" : 1,\n                      \"vcd_name\" : \"clock\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"outputSum\",\n                  \"type_name\" : \"SInt<8>\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"output\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"ground\" : {\n                      \"width\" : 8,\n                      \"vcd_name\" : \"_outputSum_output\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"io\",\n                  \"type_name\" : \"AnonymousBundle\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"output\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"bundle\" : {\n                      \"fields\" : [\n                        {\n                          \"name\" : \"out\",\n                          \"type_name\" : \"Bool\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"output\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 1,\n                              \"vcd_name\" : \"io_out\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\" : \"a\",\n                          \"type_name\" : \"Bool\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"output\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 1,\n                              \"vcd_name\" : \"io_a\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\" : \"b\",\n                          \"type_name\" : \"Bool\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"output\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 1,\n                              \"vcd_name\" : \"io_b\"\n                            }\n                          }\n                        }\n                      ],\n                      \"vcd_name\" : \"io\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"inputSum\",\n                  \"type_name\" : \"MyBundleT\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"input\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"bundle\" : {\n                      \"fields\" : [\n                        {\n                          \"name\" : \"a\",\n                          \"type_name\" : \"UInt<8>\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"input\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 8,\n                              \"vcd_name\" : \"inputSum_a\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\" : \"b\",\n                          \"type_name\" : \"UInt<8>\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"input\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 8,\n                              \"vcd_name\" : \"inputSum_b\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\" : \"nestedBundle\",\n                          \"type_name\" : \"AnonymousBundle\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"input\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"bundle\" : {\n                              \"fields\" : [\n                                {\n                                  \"name\" : \"z\",\n                                  \"type_name\" : \"Bool\",\n                                  \"hw_type\" : {\n                                    \"port\" : {\n                                      \"direction\" : \"input\"\n                                    }\n                                  },\n                                  \"real_type\" : {\n                                    \"ground\" : {\n                                      \"width\" : 1,\n                                      \"vcd_name\" : \"nestedBundle_z\"\n                                    }\n                                  }\n                                }\n                              ],\n                              \"vcd_name\" : \"nestedBundle\"\n                            }\n                          }\n                        }\n                      ],\n                      \"vcd_name\" : \"inputSum\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"reset\",\n                  \"type_name\" : \"Bool\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"input\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"ground\" : {\n                      \"width\" : 1,\n                      \"vcd_name\" : \"reset\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"wire\",\n                  \"type_name\" : \"Bool\",\n                  \"hw_type\" : \"wire\",\n                  \"real_type\" : {\n                    \"ground\" : {\n                      \"width\" : 1,\n                      \"vcd_name\" : \"wire_0\"\n                    }\n                  }\n                }\n              ],\n              \"child_scopes\" : [\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"
    val _cmpJson =
      "{\n  \"scopes\" : [\n    {\n      \"name\" : \"TOP\",\n      \"child_variables\" : [\n      ],\n      \"child_scopes\" : [\n        {\n          \"name\" : \"svsimTestbench\",\n          \"child_variables\" : [\n            {\n              \"name\" : \"inputSum\",\n              \"type_name\" : \"MyBundleT\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"input\"\n                }\n              },\n              \"real_type\" : {\n                \"bundle\" : {\n                  \"fields\" : [\n                    {\n                      \"name\" : \"a\",\n                      \"type_name\" : \"UInt<8>\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"input\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 8,\n                          \"vcd_name\" : \"inputSum_a\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\" : \"b\",\n                      \"type_name\" : \"UInt<8>\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"input\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 8,\n                          \"vcd_name\" : \"inputSum_b\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\" : \"nestedBundle\",\n                      \"type_name\" : \"AnonymousBundle\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"input\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"bundle\" : {\n                          \"fields\" : [\n                            {\n                              \"name\" : \"z\",\n                              \"type_name\" : \"Bool\",\n                              \"hw_type\" : {\n                                \"port\" : {\n                                  \"direction\" : \"input\"\n                                }\n                              },\n                              \"real_type\" : {\n                                \"ground\" : {\n                                  \"width\" : 1,\n                                  \"vcd_name\" : \"nestedBundle_z\"\n                                }\n                              }\n                            }\n                          ],\n                          \"vcd_name\" : \"nestedBundle\"\n                        }\n                      }\n                    }\n                  ],\n                  \"vcd_name\" : \"inputSum\"\n                }\n              }\n            },\n            {\n              \"name\" : \"outputSum\",\n              \"type_name\" : \"SInt<8>\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"output\"\n                }\n              },\n              \"real_type\" : {\n                \"ground\" : {\n                  \"width\" : 8,\n                  \"vcd_name\" : \"_outputSum_output\"\n                }\n              }\n            },\n            {\n              \"name\" : \"clock\",\n              \"type_name\" : \"Clock\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"input\"\n                }\n              },\n              \"real_type\" : {\n                \"ground\" : {\n                  \"width\" : 1,\n                  \"vcd_name\" : \"clock\"\n                }\n              }\n            },\n            {\n              \"name\" : \"reset\",\n              \"type_name\" : \"Bool\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"input\"\n                }\n              },\n              \"real_type\" : {\n                \"ground\" : {\n                  \"width\" : 1,\n                  \"vcd_name\" : \"reset\"\n                }\n              }\n            },\n            {\n              \"name\" : \"io\",\n              \"type_name\" : \"AnonymousBundle\",\n              \"hw_type\" : {\n                \"port\" : {\n                  \"direction\" : \"output\"\n                }\n              },\n              \"real_type\" : {\n                \"bundle\" : {\n                  \"fields\" : [\n                    {\n                      \"name\" : \"out\",\n                      \"type_name\" : \"Bool\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"output\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 1,\n                          \"vcd_name\" : \"io_out\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\" : \"a\",\n                      \"type_name\" : \"Bool\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"output\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 1,\n                          \"vcd_name\" : \"io_a\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\" : \"b\",\n                      \"type_name\" : \"Bool\",\n                      \"hw_type\" : {\n                        \"port\" : {\n                          \"direction\" : \"output\"\n                        }\n                      },\n                      \"real_type\" : {\n                        \"ground\" : {\n                          \"width\" : 1,\n                          \"vcd_name\" : \"io_b\"\n                        }\n                      }\n                    }\n                  ],\n                  \"vcd_name\" : \"io\"\n                }\n              }\n            }\n          ],\n          \"child_scopes\" : [\n            {\n              \"name\" : \"dut\",\n              \"child_variables\" : [\n                {\n                  \"name\" : \"inputSum\",\n                  \"type_name\" : \"MyBundleT\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"input\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"bundle\" : {\n                      \"fields\" : [\n                        {\n                          \"name\" : \"a\",\n                          \"type_name\" : \"UInt<8>\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"input\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 8,\n                              \"vcd_name\" : \"inputSum_a\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\" : \"b\",\n                          \"type_name\" : \"UInt<8>\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"input\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 8,\n                              \"vcd_name\" : \"inputSum_b\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\" : \"nestedBundle\",\n                          \"type_name\" : \"AnonymousBundle\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"input\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"bundle\" : {\n                              \"fields\" : [\n                                {\n                                  \"name\" : \"z\",\n                                  \"type_name\" : \"Bool\",\n                                  \"hw_type\" : {\n                                    \"port\" : {\n                                      \"direction\" : \"input\"\n                                    }\n                                  },\n                                  \"real_type\" : {\n                                    \"ground\" : {\n                                      \"width\" : 1,\n                                      \"vcd_name\" : \"nestedBundle_z\"\n                                    }\n                                  }\n                                }\n                              ],\n                              \"vcd_name\" : \"nestedBundle\"\n                            }\n                          }\n                        }\n                      ],\n                      \"vcd_name\" : \"inputSum\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"outputSum\",\n                  \"type_name\" : \"SInt<8>\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"output\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"ground\" : {\n                      \"width\" : 8,\n                      \"vcd_name\" : \"_outputSum_output\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"clock\",\n                  \"type_name\" : \"Clock\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"input\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"ground\" : {\n                      \"width\" : 1,\n                      \"vcd_name\" : \"clock\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"reset\",\n                  \"type_name\" : \"Bool\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"input\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"ground\" : {\n                      \"width\" : 1,\n                      \"vcd_name\" : \"reset\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"wire\",\n                  \"type_name\" : \"Bool\",\n                  \"hw_type\" : \"wire\",\n                  \"real_type\" : {\n                    \"ground\" : {\n                      \"width\" : 1,\n                      \"vcd_name\" : \"wire_0\"\n                    }\n                  }\n                },\n                {\n                  \"name\" : \"io\",\n                  \"type_name\" : \"AnonymousBundle\",\n                  \"hw_type\" : {\n                    \"port\" : {\n                      \"direction\" : \"output\"\n                    }\n                  },\n                  \"real_type\" : {\n                    \"bundle\" : {\n                      \"fields\" : [\n                        {\n                          \"name\" : \"out\",\n                          \"type_name\" : \"Bool\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"output\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 1,\n                              \"vcd_name\" : \"io_out\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\" : \"a\",\n                          \"type_name\" : \"Bool\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"output\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 1,\n                              \"vcd_name\" : \"io_a\"\n                            }\n                          }\n                        },\n                        {\n                          \"name\" : \"b\",\n                          \"type_name\" : \"Bool\",\n                          \"hw_type\" : {\n                            \"port\" : {\n                              \"direction\" : \"output\"\n                            }\n                          },\n                          \"real_type\" : {\n                            \"ground\" : {\n                              \"width\" : 1,\n                              \"vcd_name\" : \"io_b\"\n                            }\n                          }\n                        }\n                      ],\n                      \"vcd_name\" : \"io\"\n                    }\n                  }\n                }\n              ],\n              \"child_scopes\" : [\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"
    // Convert to Circe objects
    val originalJson = decode[TywaveState](_originalJson) match {
      case Right(value) => value
      case Left(error)  => throw new Exception(s"Failed to decode original json: $error")
    }
    val cmpJson = decode[TywaveState](_cmpJson) match {
      case Right(value) => value
      case Left(error)  => throw new Exception(s"Failed to decode cmp json: $error")
    }
    assert(compare(originalJson, cmpJson))
  }

}
